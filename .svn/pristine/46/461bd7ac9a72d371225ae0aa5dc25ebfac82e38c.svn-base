package com.sim.server.game.model.model;

import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentLinkedQueue;

import com.sim.server.game.common.EnhancedByteBuf;
import com.sim.server.game.engine.core.IByteTo;
import com.sim.server.game.message.response.common.RoleWeatherResponse;
import com.sim.server.game.roleplay.bean.Commodity;
import com.sim.server.game.roleplay.init.ResourceDataLoader;
import com.sim.server.game.roleplay.manager.RoomManager;
import com.sim.server.game.roleplay.player.ProductorManager;
import com.sim.server.game.roleplay.room.Room;
import com.sim.server.game.utils.CommodityUtil;

import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;

/**
 * @author liwen
 * @date:2017年12月27日 上午11:34:14
 * @Function: 生产线
 * @version 1.0
 */
@Data
@EqualsAndHashCode(callSuper = false)
public class ProductLine implements Runnable, IByteTo {

	// 生产线ID
	public int productLineId;
	// 生产桌ID
	public int equipmentId;
	// 该生产线要生产的产品类型,默认情况下该生产线不生产产品,
	public int productType = 0;
	// 员工ID
	public Employee employee = null;
	// 默认不工作
	private boolean work = false;
	// 生产总监
	private ProductorManager productor;
	// 每个生产生产线创建一个产品的时间间隔
	private static final int PERIOD_MILS = 2000;
	// 房间对象
	private Room room;

	public void setProductorManager(ProductorManager productorManager) {
		this.productor = productorManager;
		this.room = RoomManager.getNewRoomByCtx(productor.getCtx());
	}

	/**
	 * 设置当前生产线的工作状态
	 * 
	 * @param work
	 *            是否工作
	 */
	public void setWork(boolean work) {
		this.work = work;
		productor.writeProductLineState(productLineId, (byte) (work ? 1 : 0));
	}

	@SuppressWarnings("unchecked")
	public void run() {

		while (work) {
			int productId = productType + 2;
			// 如果是在工作状态,每秒创建一个产品
			// 如果仓库数量不足则停止生产并通知客户端
			if (!productor.checkWarehouse(productId, 0, productor.getCtx())) {
				stop();
				productor.writeCheckWarehouse(productor.getCtx());
				return;
			}
			// 根据当前产品类型获取要生产的原料类型
			int materialType = CommodityUtil.getMaterialTypeByProductType(productType);
			// 根据原料类型获取仓库集合
			List<Commodity> wareHouseList = room.getCommdityMap()
					.get(CommodityUtil.getWarehouseTypeByMaterialType(materialType)); //
			ConcurrentLinkedQueue<Commodity> materialQueue = null;

			Map<Integer, List<Commodity>> idleCommdityMap = room.getIdleCommdityMap();
			Map<Integer, List<Commodity>> busyCommdityMap = room.getBusyCommdityMap();
			if (materialQueue == null || materialQueue.size() == 0) {
				for (Commodity warehouse : wareHouseList) {
					if (warehouse.getQueue() != null && warehouse.getQueue().size() > 0) {
						// 取出原料
						materialQueue = warehouse.getQueue();
						break;
					} else {
						// 说明该仓库为null,需要将该仓库从busy中移除,添加到idle中
						if (busyCommdityMap.get(CommodityUtil.getWarehouseTypeByMaterialType(materialType))
								.contains(warehouse)) { // 从busy中移除
							busyCommdityMap.get(CommodityUtil.getWarehouseTypeByMaterialType(materialType))
									.remove(warehouse);
						}
						if (idleCommdityMap.get(CommodityUtil.getWarehouseTypeByMaterialType(materialType)) == null) {
							idleCommdityMap.put(CommodityUtil.getWarehouseTypeByMaterialType(materialType),
									new LinkedList<Commodity>());
						}
						if (!idleCommdityMap.get(CommodityUtil.getWarehouseTypeByMaterialType(materialType))
								.contains(warehouse)) { // 添加到idle
							idleCommdityMap.get(CommodityUtil.getWarehouseTypeByMaterialType(materialType))
									.add(warehouse);
						}
					}
				}
			}

			if (materialQueue == null || materialQueue.size() == 0) {
				stop();
				productor.writeCheckMaterial();
				return;
			}
			// 使用原料开始创建产品
			try {
				createProduct(materialQueue);
				int cd = PERIOD_MILS / employee.getEmpAbility()  ;
				Thread.sleep(cd);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	/**
	 * 创建产品
	 * 
	 * @param materialQueue
	 *            原料集合
	 * @throws CloneNotSupportedException
	 */
	private void createProduct(ConcurrentLinkedQueue<Commodity> materialQueue) throws CloneNotSupportedException {
		Commodity material = null;
		for (Commodity m : materialQueue) {
			if (m.getCommodityType() == CommodityUtil.getMaterialTypeByProductType(productType)) {
				material = materialQueue.poll();
				break;
			}
		}
		// 获取要生产的产品
		Commodity commodity = ResourceDataLoader.getInstance().getCommodities().get(productType);

		if (materialQueue != null) {
			if (material != null) {// 原料充足
				// 获取产品仓库
				Commodity product = commodity.clone();

				System.out.println("创建产品:" + product);

				// 获取指定类型仓库
				List<Commodity> productWarehouseList = room.getCommdityMap()
						.get(CommodityUtil.getWarehouseTypeByProductType(productType));
				if (productWarehouseList != null && productWarehouseList.size() > 0) {

					// 遍历集合仓库,将原料添加到一个未满仓库
					for (Commodity warehouse : productWarehouseList) {
						// 判断当前仓库是否已经满了
						if (warehouse.isFull()) {
							continue;
						}
						// 获取仓库的元素集合
						ConcurrentLinkedQueue<Commodity> queue = warehouse.getQueue();
						queue.add(product);
						product = null;
						break;
					}
					if(product != null ) {
						insertEmptyWarehouse(product);
					}
				} else {
					insertEmptyWarehouse(product);
				}

			}
		}

	}

	/**
	 * 添加一个商品到空仓库中去
	 * 
	 * @param product
	 *            商品对象
	 */
	private void insertEmptyWarehouse(Commodity product) {
		// 如果没有存储指定类型的仓库,取出一个空仓库
		LinkedList<Commodity> emptyWarehouseList = (LinkedList<Commodity>) room.getCommdityMap()
				.get(CommodityUtil.DEFAULT_WAREHOUSE_PRE_TYPE);
		// 如果没有空仓库,则停止生产并告诉客户端
		if(emptyWarehouseList == null || emptyWarehouseList.size() == 0 ) {
			stop();
			productor.writeCheckWarehouse(productor.getCtx());
		}
		// 从空仓库中取出一个
		Commodity emptyWarehouse = emptyWarehouseList.poll();
		// 创建一个新的仓库元素集合
		List<Commodity> newWarehouseEleList = new LinkedList<Commodity>();
		// 设置该新仓库的类型
		emptyWarehouse.setCommodityType(CommodityUtil.getWarehouseTypeByProductType(productType));
		// 将新添加的商品添加到新仓库中
		if (emptyWarehouse.getQueue() == null)
			emptyWarehouse.setQueue(new ConcurrentLinkedQueue<Commodity>());
		emptyWarehouse.getQueue().add(product);
		// 将该仓库添加到新的仓库类型集合中
		newWarehouseEleList.add(emptyWarehouse);
		List<Commodity> oldList = room.getCommdityMap().get(CommodityUtil.getWarehouseTypeByProductType(productType));
		if (oldList == null ) {
			oldList = new LinkedList<>() ;
		}
		newWarehouseEleList.addAll(oldList);
		// 将新仓库类型集合添加到Map中
		room.getCommdityMap().put(CommodityUtil.getWarehouseTypeByProductType(productType), newWarehouseEleList);
		// 获取busy 、 idle
		List<Commodity> busyCommdityList = room.getBusyCommdityMap()
				.get(CommodityUtil.getWarehouseTypeByProductType(productType));
		List<Commodity> idleCommdityList = room.getIdleCommdityMap().get(CommodityUtil.DEFAULT_WAREHOUSE_PRE_TYPE);
		if (busyCommdityList != null) {
			busyCommdityList.add(emptyWarehouse);
			idleCommdityList.remove(emptyWarehouse);
		} else {
			busyCommdityList = new LinkedList<Commodity>();
			busyCommdityList.add(emptyWarehouse);
			room.getBusyCommdityMap().put(CommodityUtil.getWarehouseTypeByProductType(productType), busyCommdityList);
		}
		if (idleCommdityList != null) {
			if (idleCommdityList.contains(emptyWarehouse)) {
				idleCommdityList.remove(emptyWarehouse);
			}
		}
	}

	/**
	 * 该生产线停止 生产
	 */
	private void stop() {
		work = false;
		productor.writeProductLineState(productLineId, (byte) (work ? 1 : 0));
	}

	public void toData(EnhancedByteBuf buf) {
		buf.writeInt(productLineId);
		buf.writeInt(equipmentId);
		buf.writeInt(productType);
		buf.writeInt(employee==null ? -1 : employee.getEmpId());
		buf.writeByte((byte) (work ? 1 : 0));
	}

}
