package com.sim.server.game.roleplay.player;

import java.util.LinkedList;
import java.util.List;

import com.sim.server.game.message.response.finance.FinancialListResponse;
import com.sim.server.game.message.response.finance.PurchaseResultResponse;
import com.sim.server.game.message.response.purchase.CheckWarehouseResponse;
import com.sim.server.game.message.response.purchase.SaleEquipmentResponse;
import com.sim.server.game.message.response.purchase.SaleMaterialResponse;
import com.sim.server.game.message.response.purchase.SaleWarehouseResponse;
import com.sim.server.game.model.model.BaseManager;
import com.sim.server.game.model.model.FinancialRequestMsg;
import com.sim.server.game.roleplay.bean.Equipment;
import com.sim.server.game.roleplay.bean.Material;
import com.sim.server.game.roleplay.bean.WareHouse;
import com.sim.server.game.roleplay.init.ResourceDataLoader;
import com.sim.server.game.roleplay.manager.HallManager;

import io.netty.channel.ChannelHandlerContext;

/**
 * @author liwen
 * @date:2017年12月19日 下午2:05:16
 * @Function: 采购总监
 * @version 1.0
 */
public class PurchaseManager extends BaseManager {

	// 购买仓库/材料/操作桌的数量
	private int count = -1;
	// 采购需要的花费
	private int cost;

	public PurchaseManager() {
		roleId = 4;
		roleType = 4;
		roleName = "采购总监";
	}

	public int getCount() {
		return count;
	}

	public void setCount(int count) {
		this.count = count;
	}

	public void purchaseWarehouse() {
		for (int i = 0; i < count; i++) {
			// 从数据库中取出一个存到公司
			LinkedList<WareHouse> wareHousesDB = (LinkedList<WareHouse>) ResourceDataLoader.getInstance()
					.getWareHousesDB();
			WareHouse wareHouse = wareHousesDB.pop();
			room.addWarehouse(wareHouse);
		}

	}

	public void purchaseMaterial() {
		for (int i = 0; i < count; i++) {
			// 从数据库中取出一个存到公司
			LinkedList<Material> materials = (LinkedList<Material>) ResourceDataLoader.getInstance().getMaterialsDB();
			Material material = materials.pop();
			// 获取仓库
			WareHouse wareHouse = room.getWareHouseByType(1);
			if (wareHouse != null) {
				wareHouse.getList().add(material);
			} else {
				// 如果没有仓库,则需要提示客户端购买仓库.

			}
			room.addMaterial(material);
		}

	}

	public void purchaseEquipment() {
		for (int i = 0; i < count; i++) {
			// 从数据库中取出一个存到公司
			LinkedList<Equipment> equipments = (LinkedList<Equipment>) ResourceDataLoader.getInstance()
					.getEquipmentsDB();
			Equipment equipment = equipments.pop();
			room.addEquipment(equipment);
		}

	}

	public int getCost() {
		return cost;
	}

	public void setCost(int cost) {
		this.cost = cost;
	}

	public void purchaseMaterial(int count) {
		if (!checkWarehouse(1, count)) {
			return;
		}
		// 获取财务总监
		FinanceManager financeManager = (FinanceManager) room.getFinanceManager();
		int cost = count * 100;
		int type = 13;
		financeManager.createFinReq(roleId, type, cost);

		// 同步请款单
		syncPayee();
	}

	/**
	 * 检查仓库是否足够
	 * 
	 * @param room
	 *            房间对象
	 * @param type
	 *            存放原料or产品
	 * @param count
	 *            原料or产品的数量
	 */
	private boolean checkWarehouse(int type, int count) {
		WareHouse wareHouse = room.getOrUpdateWareHouseByType(type);
		if (wareHouse == null) {
			// 通知客户端没有剩余的仓库
			writeCheckWarehouse();
			return false;
		}
		return true;
	}

	/**
	 * 检查仓库数量是否足够
	 */
	private void writeCheckWarehouse() {
		CheckWarehouseResponse response = new CheckWarehouseResponse(ctx);
		response.setResult((byte) 0);
		response.writeAndFlush();
	}

	/**
	 * 同步请款单
	 * 
	 * @param room
	 *            房间对象
	 */
	private void syncPayee() {
		ChannelHandlerContext financeCtx = room.getFinanceManager().getCtx();
		System.out.println("当前财务ID:" + HallManager.getUserIdByCtx(financeCtx));
		List<FinancialRequestMsg> financialRequestMsgs = room.getFinancialRequestMsgs();
		FinancialListResponse response = new FinancialListResponse(financeCtx);
		response.setFinancialRequestMsgs(financialRequestMsgs);
		response.writeAndFlush();
	}

	/**
	 * 购买指定数量的设备
	 * 
	 * @param count
	 *            购买设备的数量
	 */
	public void purchaseEquipment(int count) {
		FinanceManager financeManager = (FinanceManager) room.getFinanceManager();
		// 计算生产桌总花费
		int cost = count * 1000;
		int type = 12;
		financeManager.createFinReq(roleId, type, cost);
		syncPayee();
	}

	public void purchaseWarehouse(int count) {
		// 计算开销
		int cost = count * 10000;
		int type = 11;
		// 找到财务经理
		FinanceManager financeManager = (FinanceManager) room.getFinanceManager();
		financeManager.createFinReq(roleId, type, cost);
		syncPayee();
	}

	/**
	 * 响应购买设备结果
	 * 
	 * @param result
	 */
	public void writePurchaseEquipmentResult(Byte result) {
		// 如果财务经理同意
		if (result == 1) {
			purchaseEquipment();
			// 同步总金额
			room.applyFor(getCost());
			room.syncTotoalMoney();
		}
		writePurchaseResult(result);
	}

	/**
	 * 响应购买原料结果
	 * 
	 * @param result
	 */
	public void writePurchaseMaterialResult(Byte result) {
		// 如果财务经理同意
		if (result == 1) {
			purchaseMaterial();
			// 同步总金额
			room.applyFor(getCost());
			room.syncTotoalMoney();
		}

		writePurchaseResult(result);
	}

	/**
	 * 响应购买仓库
	 * @param result
	 */
	public void writePurchaseWarehouseResul(Byte result) {
		// 如果财务经理同意
		if (result == 1) {
			purchaseWarehouse();
			// 同步总金额
			room.applyFor(getCost());
			room.syncTotoalMoney();
		}
		writePurchaseResult(result);
	}
	/**
	 *  响应购买原料/仓库/设备
	 * @param result
	 */
	private void writePurchaseResult(Byte result) {
		PurchaseResultResponse response = new PurchaseResultResponse(ctx);
		response.setResult(result);
		response.writeAndFlush();
	}
	/**
	 * 卖原料
	 * @param count
	 */
	public void saleMaterial(int count) {
		int result = 1 ;
		try {
			// 计算总价格
			int money = count * 100;
			room.earn(money);
			result = 1 ;
			WareHouse wareHouse = room.getWareHouseByType(1);
			if( wareHouse!= null) {
				LinkedList list = (LinkedList) wareHouse.getList();
				while( count > 0 ) {
					list.removeFirst();
					count-- ;
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			result = 0 ;
		}
		writeMaterialSale(result);
	}
	
	/**
	 * 卖设备
	 * @param count
	 */
	public void saleEquipment(int count) {
		int result = 1 ;
		try {
			// 计算总价格
			int money = count *1000;
			room.earn(money);
			result = 1 ;
			List<Equipment> equipments = room.getEquipments();
			for (int i = 0 ;i < count ; i++ ) {
				Equipment equipment = equipments.get(i);
				if(!equipment.isUserd()) {
					equipments.remove(i);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			result = 0 ;
		}
		writeEquipmentSale(result);
	}
	
	/**
	 * 卖仓库
	 * @param count 
	 */
	public void saleWarehouse(int count) {
		int result = 1 ;
		try {
			// 计算总价格
			int money = count * 10000;
			room.earn(money);
			result = 1 ;
			List<WareHouse> wareHouses = room.getWareHouses();
			for(int i = 0 ; i < count ; i++ ) {
				wareHouses.remove(i);
			}
		} catch (Exception e) {
			e.printStackTrace();
			result = 0 ;
		}
		writeWarehouseSale(result);
	}
	/**
	 *  卖某个“产品”多少个
	 * @param type
	 * @param count
	 */
	public void sale(int type,int count) {
		
	}
	
	/**
	 *  响应卖原料
	 * @param result 
	 */
	private void writeMaterialSale(int result) {
		//告诉采购方卖出结果
		SaleMaterialResponse response = new SaleMaterialResponse(ctx);
		response.setResult((byte)result);
		response.writeAndFlush();
	}
	/**
	 *  响应卖原料
	 * @param result 
	 */
	private void writeEquipmentSale(int result) {
		//告诉采购方卖出结果
		SaleEquipmentResponse response = new SaleEquipmentResponse(ctx);
		response.setResult((byte)result);
		response.writeAndFlush();
	}
	/**
	 *  响应卖原料
	 * @param result 
	 */
	private void writeWarehouseSale(int result) {
		//告诉采购方卖出结果
		SaleWarehouseResponse response = new SaleWarehouseResponse(ctx);
		response.setResult((byte)result);
		response.writeAndFlush();
	}

}
