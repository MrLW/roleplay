package com.sim.server.game.roleplay.player;

import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ConcurrentLinkedQueue;

import com.sim.server.game.message.request.productor.ProductLineAddRequest;
import com.sim.server.game.message.response.hr.EmployeeListResponse;
import com.sim.server.game.message.response.hr.EmployeeWorkResponse;
import com.sim.server.game.message.response.productor.CheckEmployeeResponse;
import com.sim.server.game.message.response.productor.CheckMaterialResponse;
import com.sim.server.game.message.response.productor.EmployeeProductLineResponse;
import com.sim.server.game.message.response.productor.EmployeeProductLineStateResponse;
import com.sim.server.game.message.response.productor.EmployeeStateResponse;
import com.sim.server.game.message.response.productor.EmployeeSyncHPResponse;
import com.sim.server.game.message.response.productor.EquipmentListResponse;
import com.sim.server.game.message.response.productor.MaterialListResponse;
import com.sim.server.game.message.response.productor.OrderTypeResponse;
import com.sim.server.game.message.response.productor.ProductLineAddResponse;
import com.sim.server.game.message.response.productor.ProductLineStopResponse;
import com.sim.server.game.message.response.productor.ProductListResponse;
import com.sim.server.game.message.response.purchase.CheckWarehouseResponse;
import com.sim.server.game.model.model.BaseManager;
import com.sim.server.game.model.model.Employee;
import com.sim.server.game.model.model.Order;
import com.sim.server.game.model.model.ProductLine;
import com.sim.server.game.roleplay.bean.Equipment;
import com.sim.server.game.roleplay.bean.Material;
import com.sim.server.game.roleplay.bean.Product;
import com.sim.server.game.roleplay.bean.WareHouse;
import com.sim.server.game.roleplay.bean.WareHouse.WareHouseType;
import com.sim.server.game.roleplay.manager.HallManager;
import com.sim.server.game.roleplay.pool.ThreadPoolManager;

import io.netty.channel.ChannelHandlerContext;

/**
 * @author liwen
 * @date:2017年12月19日 下午2:03:07
 * @Function: 生产总监
 * @version 1.0
 */
public class ProductorManager extends BaseManager {

	private Timer timer = new Timer();

	private boolean isProduct = false;

	public ProductorManager() {
		super.roleId = 1;
		super.roleType = 1;
		super.roleName = "生产总监";
	}

	/**
	 * 添加生产线
	 * 
	 * @param request
	 * @return
	 */
	public int addProductLine(ProductLineAddRequest request) {
		Integer equipmentCount = request.getEquipmentCount();
		for (int i = 0; i < equipmentCount; i++) {
			Equipment equipment = room.firstEquipment();
			equipment.setUserd(true);
			room.getProductLineEquipment().add(equipment);
			// 将当前equipment添加到生产线设备列表
			ProductLine productLine = new ProductLine();
			productLine.setProductLineId(room.getProductLines().size());
			productLine.setEquipmentId(equipment.getEquipmentId());
			// 设置生产总监
			productLine.setProductorManager((ProductorManager) room.getProductManager());
			room.getProductLines().add(productLine);
		}
		writeProductLineAdd(1);
		// 响应生产台列表
		writeEquipments(ctx);
		return 1;
	}

	/**
	 * 创建生产线响应
	 * 
	 * @param result
	 */
	private void writeProductLineAdd(int result) {
		// 创建响应
		ProductLineAddResponse response = new ProductLineAddResponse(ctx);
		response.setResult((byte) result);
		response.writeAndFlush();
	}

	/**
	 * 更新员工的状态
	 * 
	 * @param empId
	 *            员工ID
	 * @param state
	 *            状态
	 * @return
	 */
	public int updateState(final Integer empId, final Integer state) {
		int result = room.update(empId, state);
		final Employee employee = room.getEmployeeById(empId);
		List<Employee> employees = room.getEmployeeWork();

		// 通知HR
		EmployeeWorkResponse hrResponse = new EmployeeWorkResponse(room.getHRManager().getCtx());
		hrResponse.setCount(employees.size());
		hrResponse.writeAndFlush();
		// 通知生产
		EmployeeWorkResponse productResponse = new EmployeeWorkResponse(room.getProductManager().getCtx());
		productResponse.setCount(employees.size());
		productResponse.writeAndFlush();

		writeEmployeeSyncHP(empId, employee.getHp(), ctx);
		writeEmployeeSyncHP(empId, employee.getHp(), room.getHRManager().getCtx());

		// updateHP(empId, state, employee);

		return result;
	}

	/**
	 * 定时更新玩家血量,已过时 更新血量修改成Employee对象的方法
	 * 
	 * @param empId
	 *            员工对象
	 * @param state
	 *            状态
	 * @param employee
	 *            员工对象
	 */
	@Deprecated
	private void updateHP(final Integer empId, final Integer state, final Employee employee) {
		final int curState = state;
		// 通知玩家血量减少/增加
		timer.schedule(new TimerTask() {

			@Override
			public void run() {
				if (curState == 1) { // 工作
					employee.setHp(employee.getHp() - 1);
				} else {
					// 休息
					employee.setHp(employee.getHp() + 1);
				}
				if (ctx != null) {
					writeEmployeeSyncHP(empId, employee.getHp(), ctx);
					if (room.getHRManager().getCtx() != null) {
						writeEmployeeSyncHP(empId, employee.getHp(), room.getHRManager().getCtx());
					}
				}
			}

		}, 0, 1000);
	}

	/**
	 * 更新某个员工的血量
	 * 
	 * @param empId
	 *            员工ID
	 * @param hp
	 *            血量
	 */
	private void writeEmployeeSyncHP(final Integer empId, final int hp, ChannelHandlerContext ctx) {
		// 更新生产血量值
		EmployeeSyncHPResponse response = new EmployeeSyncHPResponse(ctx);
		response.setEmpId(empId);
		response.setHp(hp);
		response.writeAndFlush();
	}

	/**
	 * 给生产线配置生产产品
	 * 
	 * @param productLineId
	 *            产品线ID
	 * @param productTypeId
	 *            产品类型ID
	 */
	public void setProductForLine(Integer productLineId, Integer productTypeId) {
		// 找到指定生产线
		ProductLine productLine = room.getProductLineById(productLineId);
		productLine.setProductTypeId(productTypeId);
	}

	/**
	 * 开始生产
	 */
	public int startProduct() {
		final List<ProductLine> productLines = room.getProductLines();
		for (ProductLine productLine : productLines) {
			if (productLine.getEmployeeId() >= 0 && productLine.getProductTypeId() >= 0) { // 已配置员工并且配置了生产产品才可以生产
				productLine.setWork(true);
				ThreadPoolManager.executeTaskUseFixedThreadPool(productLine);
			}
		}
		return 1;
	}

	/**
	 * 停止生产
	 */
	public int stopProduct() {
		int result = 1;
		try {
			isProduct = false;
			// 遍历生产线
			List<ProductLine> productLines = room.getProductLines();
			for (ProductLine productLine : productLines) {
				productLine.setEmployeeId(-1);
			}
		} catch (Exception e) {
			e.printStackTrace();
			result = 0;
		}
		return result;
	}

	/**
	 * 获取一个闲置状态下的尚未工作的员工
	 */
	public Employee getIdleAndNotWorking() {
		List<Employee> idleEmployees = room.getIdleEmployees();
		for (Employee employee : idleEmployees) {
			if (!employee.isWorking()) {
				return employee;
			}
		}
		return null;
	}

	
	/**
	 * 响应原料不足
	 */
	public void writeCheckMaterial() {
		// 通知客户端
		CheckMaterialResponse response = new CheckMaterialResponse(ctx);
		response.setResult((byte) 0);
		response.writeAndFlush();
	}

	/**
	 * 检查仓库是否足够
	 * 
	 * @param type
	 *            存放原料or产品
	 * @param count
	 *            原料or产品的数量
	 */
	public boolean checkWarehouse(int type, int count) {
		WareHouse wareHouse = room.getOrUpdateWareHouseByType(type);
		if (wareHouse == null) {
			// 通知客户端没有剩余的仓库
			writeCheckWarehouse();
			return false;
		}
		return true;
	}

	/**
	 * 响应仓库数量是否足够
	 */
	public void writeCheckWarehouse() {
		CheckWarehouseResponse response = new CheckWarehouseResponse(ctx);
		response.setResult((byte) 0);
		response.writeAndFlush();
	}

	/**
	 * 修改订单状态
	 * 
	 * @param orderId
	 *            订单ID
	 * @param orderType
	 *            订单类型
	 */
	public void changeOrderType(Integer orderId, Integer orderType) {
		// 获取指定订单类型
		List<Order> allOrders = room.getAllOrders();
		for (Order order : allOrders) {
			if (order.getOrderId() == orderId) {
				order.setOrderType(orderType);
			}
		}
		OrderTypeResponse response = new OrderTypeResponse(ctx);
		response.setResult((byte) 1);
		response.writeAndFlush();
	}

	/**
	 * 产品列表响应
	 */
	public void writeProductList() {
		WareHouse wareHouse = room.getWareHouseByType(WareHouseType.PRODUCTA.getValue());
		ConcurrentLinkedQueue products;
		if (wareHouse != null) {
			products = wareHouse.getQueue();
		} else {
			products = new ConcurrentLinkedQueue();
		}

		// 创建响应
		ProductListResponse product = new ProductListResponse(ctx);
		product.setProducts(products);
		product.writeAndFlush();

		ProductListResponse bazaar = new ProductListResponse(room.getBazaarManager().getCtx());
		bazaar.setProducts(products);
		bazaar.writeAndFlush();
	}

	/**
	 * 检查员工是否足够
	 */
	public void checkEmployee() {
		List<Employee> employees = room.getIdleEmployees();
		CheckEmployeeResponse response = new CheckEmployeeResponse(ctx);
		response.setResult((byte) (employees.size() > 0 ? 1 : 0));
		response.writeAndFlush();
	}

	/**
	 * 检查原料是否足够
	 */
	public void checkMaterial() {
		// 获取原料仓库
		WareHouse materialWarehouse = room.getWareHouseByType(WareHouseType.MATERIALA.getValue());
		ConcurrentLinkedQueue materials = materialWarehouse.getQueue();
		CheckMaterialResponse response = new CheckMaterialResponse(ctx);
		response.setResult((byte) (materials.size() > 0 ? 1 : 0));
		response.writeAndFlush();
	}

	/**
	 * 写员工状态
	 * 
	 * @param empId
	 *            员工ID
	 * @param state
	 *            员工状态
	 */
	public void writeEmployeeState(Integer empId, Integer state) {
		int result = updateState(empId, state);
		// 创建响应
		EmployeeStateResponse response = new EmployeeStateResponse(ctx);
		response.setResult((byte) result);
		response.writeAndFlush();
	}

	/**
	 * 响应设备列表
	 * 
	 * @param ctx
	 *            响应者
	 */
	public void writeEquipments(ChannelHandlerContext ctx) {
		List<Equipment> equipments = room.getEquipments();
		// 创建响应
		EquipmentListResponse response = new EquipmentListResponse(ctx);
		response.setEquipments(equipments);
		response.writeAndFlush();
	}

	/**
	 * 响应原料列表
	 * 
	 * @param ctx
	 *            响应者
	 */
	public void writeMaterials(ChannelHandlerContext ctx) {
		WareHouse wareHouse = room.getWareHouseByType(WareHouseType.MATERIALA.getValue());
		ConcurrentLinkedQueue materials = null;
		if (wareHouse != null) {
			materials = wareHouse.getQueue();
		} else {
			materials = new ConcurrentLinkedQueue();
		}
		// 创建响应
		MaterialListResponse response = new MaterialListResponse(ctx);
		response.setMaterials(materials);
		response.writeAndFlush();
	}

	/**
	 * 取消HP的更新
	 */
	public void cancel() {
		timer.cancel();
	}

	/**
	 * 为生产线配置员工
	 * 
	 * @param empId
	 *            员工ID
	 * @param productLineId
	 *            生产线ID
	 */
	public void deployProductLine(int empId, int productLineId) {
		ProductLine productLine = room.getProductLineById(productLineId);
		Employee emp = room.getEmployeeById(empId);
		productLine.setEmployeeId(empId);
		emp.setProductLineId(productLineId);
		// 设置员工工作
		emp.setWorking(true);

		writeEmployeeProductLine();

		// 通知员工列表状态更新
		writeEmployees(ctx);
		// writeEmployeeProductLineState(emp);
	}

	/**
	 * 生产线配置员工响应
	 */
	private void writeEmployeeProductLine() {
		EmployeeProductLineResponse response = new EmployeeProductLineResponse(ctx);
		response.setResult((byte) 1);
		response.writeAndFlush();
	}

	/**
	 * 为生产线配置员工同步状态响应
	 * 
	 * @param emp
	 *            员工对象
	 */
	private void writeEmployeeProductLineState(Employee emp) {
		EmployeeProductLineStateResponse response = new EmployeeProductLineStateResponse(ctx);
		response.setEmployee(emp);
		response.writeAndFlush();
	}

	/**
	 * 公司已有员工数量
	 * 
	 * @param ctx
	 *            客户端对象
	 */
	public void writeEmployees(ChannelHandlerContext ctx) {
		List<Employee> employees = room.getEmployees();
		EmployeeListResponse response = new EmployeeListResponse(ctx);
		response.setEmployees(employees);
		response.writeAndFlush();
	}
	/**
	 *  通知客户端
	 * @param productLineId 生产线ID
	 */
	public void writeProductLineStop(int productLineId) {
		ProductLineStopResponse response = new ProductLineStopResponse(ctx);
		response.setReason(productLineId);
		response.writeAndFlush();
	}
}
