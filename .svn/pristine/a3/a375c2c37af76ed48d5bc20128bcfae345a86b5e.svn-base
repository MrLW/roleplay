package com.sim.server.game.roleplay.player;

import java.util.LinkedList;
import java.util.List;

import com.sim.server.game.message.response.bazaar.CoffersResponse;
import com.sim.server.game.message.response.bazaar.DeliveryOrderResponse;
import com.sim.server.game.model.model.BaseManager;
import com.sim.server.game.model.model.Order;
import com.sim.server.game.roleplay.bean.Product;
import com.sim.server.game.roleplay.bean.WareHouse;
import com.sim.server.game.roleplay.init.OrderDataLoader;
import com.sim.server.game.roleplay.init.RoleDataLoader;
import com.sim.server.game.roleplay.manager.RoomManager;
import com.sim.server.game.roleplay.room.Room;

/**
 * @author liwen
 * @date:2017年12月19日 下午3:31:15
 * @Function: 市场总监
 * @version 1.0
 */
public class BazaarManager extends BaseManager {

	private int beforeCommitApplyForMoney = 0;

	/**
	 * 默认每次刷新订单需要消耗的money
	 */
	private Integer FLUSH_ORDER_MONEY = 10;

	public BazaarManager() {
		roleId = 5;
		roleType = 5;
		roleName = "BazaarManager";
	}

	/**
	 * 接收订单
	 * 
	 * @param order
	 * @return
	 */
	public int purchase(Order order) {
		int result;
		try {
			// 将当前订单添加到房间
			Room room = RoomManager.getRoomByCtx(ctx);
			room.insertOrder(order);
			this.applyForMoney -= order.getSpendIncome();
			result = 1;
			// 将当前订单读取角标减1
			OrderDataLoader.CURRENT_INDEX = 0;
		} catch (Exception e) {
			e.printStackTrace();
			result = 0;
		}
		return result;
	}

	/**
	 * 刷新订单
	 * 
	 * @return 下一个订单对象
	 */
	public List<Order> flushOrder() {
		List<Order> orders = OrderDataLoader.getInstance().next();
		this.applyForMoney -= FLUSH_ORDER_MONEY;
		coffers();
		return orders;
	}

	/**
	 * 获取市场总监可用金额
	 * 
	 * @return
	 */
	public Integer getApplyForMoney() {
		return applyForMoney;
	}

	/**
	 * 判断当前剩余金额是否足够刷新
	 * 
	 * @return true:可以刷新,false:不可以刷新
	 */
	public boolean isFlush() {
		return applyForMoney >= FLUSH_ORDER_MONEY ? true : false;
	}

	public void applyForMoney(Integer applyForMoney) {
		// 其他部门向财务申请金额
		Room room = RoomManager.getRoomByCtx(ctx);
		if (room.isApplyFor(applyForMoney)) {
			room.applyFor(applyForMoney);
		}

	}

	public int getBeforeCommitApplyForMoney() {
		return beforeCommitApplyForMoney;
	}

	public void setBeforeCommitApplyForMoney(int beforeCommitApplyForMoney) {
		this.beforeCommitApplyForMoney = beforeCommitApplyForMoney;
	}

	/**
	 * 市场小金库
	 */
	public void coffers() {
		CoffersResponse response = new CoffersResponse(ctx);
		response.setCoffers(applyForMoney);
		response.writeAndFlush();
	}

	/**
	 * 申请小金库
	 * 
	 * @param money
	 *            申请的钱
	 */
	public void coffers(Integer money) {
		this.applyForMoney += money;
		coffers();
	}

	/**
	 * 交付订单
	 * 
	 * @param orderId
	 *            订单ID
	 */
	public void delivery(Integer orderId) {
		// 交付订单的结果
		int result = 1;
		// 查找orderId的订单
		Room room = RoomManager.getNewRoomByCtx(ctx);
		List<Order> allOrders = room.getAllOrders();
		Order curOrder = null;
		for (Order order : allOrders) {
			if (order.getOrderId() == orderId) {
				curOrder = order;
				break;
			}
		}
		if (curOrder != null) {
			Integer productCount = curOrder.getProductCount();
			WareHouse wareHouse = room.getWareHouseByType(3);
			List<Product> products = wareHouse.getList();
			if (products.size() < productCount) {
				result = 0; // 产品不够
			} else {
				result = 1; // 产品足够
				for (int i = 0; i < productCount; i++) {
					if (products != null)
						products.remove(i);
				}
				// 设置当前订单为已交付
				curOrder.setDelivery((byte) 1);
				// 盈利
				Integer orderIncome = curOrder.getOrderIncome();
				room.earn(orderIncome);
			}
		}

		// 响应交付订单
		DeliveryOrderResponse response = new DeliveryOrderResponse(ctx);
		response.setResult((byte) result);
		response.writeAndFlush();
	}

}
