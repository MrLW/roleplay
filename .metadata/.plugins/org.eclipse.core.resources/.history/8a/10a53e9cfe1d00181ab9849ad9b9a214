package com.sim.server.game.roleplay.player;

import java.util.List;
import java.util.Map;
import java.util.Queue;

import com.sim.server.game.common.EnhancedByteBuf;
import com.sim.server.game.engine.core.IByteTo;
import com.sim.server.game.message.response.bazaar.AcceptOrderResponse;
import com.sim.server.game.message.response.bazaar.ApplyForMoneyResponse;
import com.sim.server.game.message.response.bazaar.CoffersResponse;
import com.sim.server.game.message.response.bazaar.DeliveryOrderResponse;
import com.sim.server.game.message.response.bazaar.FlushOrderResponse;
import com.sim.server.game.message.response.bazaar.FlushOrderResultResponse;
import com.sim.server.game.model.model.BaseManager;
import com.sim.server.game.model.model.FinanceDailyItem;
import com.sim.server.game.model.model.FinanceDailyItem.FinancialType;
import com.sim.server.game.model.model.Order;
import com.sim.server.game.model.model.ReportItem;
import com.sim.server.game.model.model.ReportItem.ReportItemCategory;
import com.sim.server.game.roleplay.bean.Commodity;
import com.sim.server.game.roleplay.factory.FinanceDailyFactory;
import com.sim.server.game.roleplay.factory.ReportItemFactory;
import com.sim.server.game.roleplay.init.OrderDataLoader;
import com.sim.server.game.roleplay.manager.RoomManager;
import com.sim.server.game.roleplay.room.Room;
import com.sim.server.game.utils.CommodityUtil;

/**
 * @author liwen
 * @date:2017年12月19日 下午3:31:15
 * @Function: 市场总监
 * @version 1.0
 */
public class BazaarManager extends BaseManager implements IByteTo {

	private int beforeCommitApplyForMoney = 0;

	/**
	 * 默认每次刷新订单需要消耗的money
	 */
	private Integer FLUSH_ORDER_MONEY = 10;

	public BazaarManager() {
		roleId = 5;
		roleType = 5;
		roleName = "市场总监";
	}

	/**
	 * 接收订单
	 * 
	 * @param order
	 * @return
	 */
	public void acceptOrder(Order order) {
		int result;
		try {
			// 将当前订单添加到房间
			Room room = RoomManager.getRoomByCtx(ctx);
			room.insertOrder(order);
			removeFromCurOrders(order);
			this.applyForMoney -= order.getSpendIncome();
			result = 1;

			// 生成财务报表
			ReportItem reportItem = ReportItemFactory.buildReportItem(ReportItemCategory.ORDER, "订单接收",
					room.getCurTime(), -order.getSpendIncome());
			FinanceManager financeManager = (FinanceManager) room.getFinanceManager();
			financeManager.addReportItem(reportItem);

		} catch (Exception e) {
			e.printStackTrace();
			result = 0;
		}

		writeAcceptOrder(result);

		List<Order> curOrders = OrderDataLoader.getInstance().getCurOrders();

		updateOrders(curOrders);

		writeCoffer();

	}

	/**
	 * 接收订单的响应
	 * 
	 * @param result
	 *            接收订单的结果
	 */
	private void writeAcceptOrder(int result) {
		AcceptOrderResponse response = new AcceptOrderResponse(ctx);
		response.setResult((byte) result);
		response.writeAndFlush();
	}

	/**
	 * 将订单从客户端显示的订单列表移除
	 * 
	 * @param order
	 *            订单对象
	 */
	private void removeFromCurOrders(Order order) {
		OrderDataLoader.getInstance().getCurOrders().remove(order);
	}

	/**
	 * 刷新订单
	 * 
	 * @return 下一个订单对象
	 */
	public void flushOrder() {
		this.applyForMoney -= FLUSH_ORDER_MONEY;
		writeCoffer();
		writeOrders();
	}

	/**
	 * 更新已有的所有订单
	 */
	public void writeOrders() {
		List<Order> orders = OrderDataLoader.getInstance().next();
		FlushOrderResponse response = new FlushOrderResponse(ctx);
		response.setOrders(orders);
		response.writeAndFlush();
	}

	private void updateOrders(List<Order> curOrders) {
		FlushOrderResponse response = new FlushOrderResponse(ctx);
		response.setOrders(curOrders);
		response.writeAndFlush();
	}

	/**
	 * 获取市场总监可用金额
	 * 
	 * @return
	 */
	public Integer getApplyForMoney() {
		return applyForMoney;
	}

	/**
	 * 判断当前剩余金额是否足够刷新
	 * 
	 * @return true:可以刷新,false:不可以刷新
	 */
	public boolean isFlush() {
		return applyForMoney >= FLUSH_ORDER_MONEY ? true : false;
	}
	
	public int getBeforeCommitApplyForMoney() {
		return beforeCommitApplyForMoney;
	}

	public void setBeforeCommitApplyForMoney(int beforeCommitApplyForMoney) {
		this.beforeCommitApplyForMoney = beforeCommitApplyForMoney;
	}

	/**
	 * 市场小金库
	 */
	public void writeCoffer() {
		CoffersResponse response = new CoffersResponse(ctx);
		response.setCoffers(applyForMoney);
		response.writeAndFlush();
	}

	/**
	 * 申请小金库
	 * 
	 * @param money
	 *            申请的钱
	 */
	public void coffers(Integer money) {
		this.applyForMoney += money;
		writeCoffer();
	}

	/**
	 * 交付订单
	 * 
	 * @param orderId
	 *            订单ID
	 */
	/*public void delivery(int orderId) {
		// 交付订单的结果
		int result = 1;
		// 查找orderId的订单
		Order order = room.getOrderById(orderId);
		// 获取订单的产品类型
		int productTypeId = order.getProductTypeId();
		Queue<Commodity> queue = room.getCommdityMap().get(CommodityUtil.getWarehouseTypeByProductType(productTypeId));
		// 统计产品数量
		int totalCount = 0;
		for (Commodity commodity : queue) {
			if (commodity != null && commodity.getQueue() != null) {
				totalCount += commodity.getQueue().size();
			}
		}
		int orderIncome = 0;
		int productCount = 0;
		if (order != null) {
			productCount = order.getProductCount();
			if (totalCount < productCount) {
				result = 0; // 产品不够
			} else {
				result = 1; // 产品足够
			}
		}
		// 订单报表
		ReportItem reportItem;
		if (result == 1) {
			for (Commodity warehouse : queue) {
				if (warehouse != null && warehouse.getQueue() != null && productCount > 0) {
					while (warehouse.getQueue() != null && warehouse.getQueue().size() > 0 && productCount > 0) {
						warehouse.getQueue().poll();
						productCount--;
					}
				}
			}
			// 设置当前订单为已交付
			order.setDelivery((byte) 1);
			// 盈利
			orderIncome = order.getOrderIncome();
			room.earn(orderIncome);
			reportItem = ReportItemFactory.buildReportItem(ReportItemCategory.ORDER, "订单交付成功", room.getCurTime(),
					+orderIncome);
		} else {
			reportItem = ReportItemFactory.buildReportItem(ReportItemCategory.ORDER, "订单交付失败", room.getCurTime(), 0);
		}
		FinanceManager financeManager = (FinanceManager) room.getFinanceManager();
		financeManager.addReportItem(reportItem);
		// 刷新产品列表
		ProductorManager productorManager = (ProductorManager) room.getProductManager();

		productorManager.writeProductList();

		writeDeliveryOrder(result);
	}*/

	public void delivery2(int orderId) {
		// 交付订单的结果
		int result = 1;
		// 查找orderId的订单
		Order order = room.getOrderById(orderId);
		// 获取订单的产品类型
		Queue<Commodity> commodities = room.getCommodities2();
		// 统计产品数量
		int totalCount = 0;
		for (Commodity commodity : commodities) {
			Map<Commodity, Integer> atomMap = commodity.getAtomMap();
			for (Map.Entry<Commodity, Integer> entry : atomMap.entrySet()) {
				Commodity product = entry.getKey();
				if (CommodityUtil.isProduct(product.getCommodityData().getCommodityType())) {
					totalCount += entry.getValue();
				}
			}
		}
		int productCount = 0;
		if (order != null) {
			productCount = order.getProductCount();
			if (totalCount < productCount) {
				result = 0; // 产品不够
			} else {
				result = 1; // 产品足够
			}
		}
		int orderIncome = 0;
		// 订单报表
		ReportItem reportItem;
		if (result == 1) {
			for (Commodity warehouse : commodities) {
				if (warehouse != null && warehouse.getAtomMap() != null && productCount > 0) {
					Map<Commodity, Integer> atomMap = warehouse.getAtomMap();
					for(Map.Entry<Commodity, Integer> entry:atomMap.entrySet()) {
						// 产品对象
						Commodity atom = entry.getKey();
						if(CommodityUtil.isProduct(atom.getCommodityData().getCommodityType())) {
							int count = entry.getValue();
							//此仓库中的数量不足
							if(productCount > count) {
								productCount -= count ;
								room.release(warehouse);
							} else if(productCount == count ) {// 刚刚好
								productCount-=count;
								room.release(warehouse);
								break;
							} else if(productCount < count) {
								count -= productCount ;
								atomMap.put(atom, count);
							}
						}
					}
				}
			}
			// 设置当前订单为已交付
			order.setDelivery((byte) 1);
			// 盈利
			orderIncome = order.getOrderIncome();
			room.earn(orderIncome);
			reportItem = ReportItemFactory.buildReportItem(ReportItemCategory.ORDER, "订单交付成功", room.getCurTime(),
					+orderIncome);
		} else {
			reportItem = ReportItemFactory.buildReportItem(ReportItemCategory.ORDER, "订单交付失败", room.getCurTime(), 0);
		}
		FinanceManager financeManager = (FinanceManager) room.getFinanceManager();
		financeManager.addReportItem(reportItem);
		// 刷新产品列表
		ProductorManager productorManager = (ProductorManager) room.getProductManager();

		productorManager.writeProductList();

		writeDeliveryOrder(result);
	}

	/**
	 * 响应交付订单
	 * 
	 * @param result
	 *            交付订单结果
	 */
	private void writeDeliveryOrder(int result) {
		DeliveryOrderResponse response = new DeliveryOrderResponse(ctx);
		response.setResult((byte) result);
		response.writeAndFlush();
	}

	/**
	 * 创建财务请款
	 * 
	 * @param applyMoney
	 */
	public void applyFor(int applyMoney) {
		FinanceManager financeManager = (FinanceManager) room.getFinanceManager();
		// 创建财务请款实体bean
		FinanceDailyItem financeDailyItem = FinanceDailyFactory.buildFinanceDaily(FinancialType.BAZAAR, roleId,
				"市场申请-留言", room.getCurTime(), applyMoney, "市场申请");
		financeManager.addFinanceDaily(financeDailyItem);
		// 获取财务部经理
		ApplyForMoneyResponse response = new ApplyForMoneyResponse(financeManager.getCtx());
		response.setMoney(applyMoney);
		response.writeAndFlush();

	}

	/**
	 * 响应刷新订单结果
	 */
	public void writeFlushOrderResult() {
		FlushOrderResultResponse response = new FlushOrderResultResponse(ctx);
		if (isFlush())
			response.setResult((byte) 1);
		else
			response.setResult((byte) 0);
		response.writeAndFlush();
	}

	public void toData(EnhancedByteBuf buf) {
		buf.writeInt(roleId);
		buf.writeInt(roleType);
		buf.writeString(roleName);
		buf.writeInt(applyForMoney);
	}

}
